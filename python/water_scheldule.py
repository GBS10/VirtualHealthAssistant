# -*- coding: utf-8 -*-
"""Water scheldule

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g3ZJn-Bix-g7AAea9MJoeDChl8f432e0
"""

from google.colab import files
uploaded = files.upload() #Uploading file to drive

import io 
import pandas as pd  
df = pd.read_csv(io.BytesIO(uploaded['dehydration_estimation1.csv'])) #reading data.csv
df.head(10)

df.isnull().sum() #checking for missing values

df.describe()

df['result'] = [1 if x>=50.0 else 0 for x in df['total body water using InBody 720 [l]']]

df

df.plot()

# plot between 2 attributes
plt.bar(df['Date'], df['result'])
plt.xlabel("Date")
plt.ylabel("result")
plt.show()

# scatter plot between date and result
plt.scatter(df['Date'], df['result'])
plt.show()

"""**Logistic regression**"""

# input
x = df.iloc[:, [1, 2]].values
  
# output
y = df.iloc[:, 2].values

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(
		x, y, test_size = 0.25, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
xtrain = sc_x.fit_transform(xtrain)
xtest = sc_x.transform(xtest)

print (xtrain[0:10, :])

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(xtrain, ytrain)

y_pred = classifier.predict(xtest)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(ytest, y_pred)

print ("Confusion Matrix : \n", cm)

from sklearn.metrics import accuracy_score
print ("Accuracy : ", accuracy_score(ytest, y_pred))

from matplotlib.colors import ListedColormap
X_set, y_set = xtest, ytest
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1,
							stop = X_set[:, 0].max() + 1, step = 0.01),
					np.arange(start = X_set[:, 1].min() - 1,
							stop = X_set[:, 1].max() + 1, step = 0.01))

plt.contourf(X1, X2, classifier.predict(
			np.array([X1.ravel(), X2.ravel()]).T).reshape(
			X1.shape), alpha = 0.75, cmap = ListedColormap(('red', 'green')))

plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())

for i, j in enumerate(np.unique(y_set)):
	plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
				c = ListedColormap(('red', 'green'))(i), label = j)
	
plt.title('Classifier (Test set)')
plt.xlabel('Date')
plt.ylabel('Body water')
plt.legend()
plt.show()